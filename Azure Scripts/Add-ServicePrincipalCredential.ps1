<#
.SYNOPSIS
    Script that generates service principal credentials
.DESCRIPTION
    This script automates the creation of a service principal credential. There are 2 options, self-signed 
    certificate or password
.PARAMETER certName
    The certificate name.
.PARAMETER certFilePath
    The local filesystem path where the certificate file will be placed.
.PARAMETER appId
    The application Id for the sevice principal
.EXAMPLE
    C:\PS>
    Example of how to use this cmdlet
.EXAMPLE
    C:\PS>
    Another example of how to use this cmdlet
.INPUTS
    Inputs to this cmdlet (if any)
.OUTPUTS
    Output from this cmdlet (if any)
.NOTES
    General notes
.COMPONENT
    The component this cmdlet belongs to
.ROLE
    The role this cmdlet belongs to
.FUNCTIONALITY
    The functionality that best describes this cmdlet
#>

[CmdletBinding(DefaultParameterSetName = 'Cert')]
param (
    [Parameter(Mandatory,ParameterSetName = 'Cert')][string]$certName,
    [Parameter(Mandatory,ParameterSetName = 'Cert')][string]$certFilePath,
    [Parameter(Mandatory)][string]$appId,
    [Parameter(ParameterSetName = 'Cert')][string]$KeyLength = 4096,
    [Parameter(ParameterSetName = 'Cert')][string]$KeyAlgorithm = "RSA",
    [Parameter(ParameterSetName = 'Cert',HelpMessage="Example: CN=certificatename")][string]$certSubject="CN="+$certName,
    [Parameter(ParameterSetName = 'Cert')][string]$CertStoreLocation = "Cert:\CurrentUser\My",
    # ? Change this to autogenerated password and output in the end
    [Parameter(ParameterSetName = 'Cert')][string]$certPassword,
    [Parameter(ParameterSetName = 'Cert')][switch]$ExportPubCertificate,
    [Parameter(ParameterSetName = 'Cert')][switch]$ExportPrivateKey,
    [Parameter(ParameterSetName = 'Password')][switch]$password,
    [Parameter(HelpMessage="Enter the start date of the logs, Ex: 17/07/2017 or 17/07/2017 09:00:00")][string]$startDate = (Get-Date),
    [Parameter(HelpMessage="Enter the start date of the logs, Ex: 17/07/2017 or 17/07/2017 09:00:00")][string]$endDate = (Get-Date).AddYears(1)
)

### * Functions
function ExportCertificate {
    param (
        [Parameter(Mandatory)][object]$Certificate,
        [Parameter(Mandatory)][string]$Path,
        [Parameter(Mandatory)][string]$CertName,
        [Parameter(Mandatory)][securestring]$Password,
        [Parameter(Mandatory)][string]$certType
    )
    # * Exports certificate to pfx format
    if ($certType -eq "pfx") {
        $Certificate | Export-PfxCertificate -FilePath $Path"\"$CertName".pfx" -Password $Password
    }
    # Exports certificate to cer format
    if ($certType -eq "cer") {
        $Certificate | Export-Certificate -FilePath $Path"\"$CertName".cer"
    }
}
### End Functions 

# * Login to Azure
# ? Any way to automate this login?
Login-AzAccount

# Convert strings to date
if (!$PSBoundParameters.ContainsKey('startDate')) {
    $startDate = Get-Date $startDate
}
if (!$PSBoundParameters.ContainsKey('endDate')) {
    $endDate = Get-Date $endDate
}

# If option is certificate
if($PSBoundParameters.ContainsKey('certName')){
    # * Generate the public certificate
    $certificate = ""
    Write-Host "Creating self-signed certificate" $certName "..." -ForegroundColor Yellow
    $certificate =  New-SelfSignedCertificate -KeyFriendlyName $certName -KeyAlgorithm $KeyAlgorithm -KeyLength $KeyLength -CertStoreLocation $CertStoreLocation -Subject $certSubject -NotBefore $startDate -NotAfter $endDate
    Write-Host "Certificate "-ForegroundColor Green -NoNewline; Write-Host $certName -ForegroundColor Yellow -NoNewline; Write-Host " created successfully and added to certstore!" -ForegroundColor Green

    # * Export the public certificate to file
    if ($ExportPubCertificate) {
        Write-Host "Exporting the certificate..." -ForegroundColor Yellow
        ExportCertificate -Certificate $certificate -Path $certFilePath -CertName $certName -certType "cer"
        Write-Host " The certificate was successfully exported!" -ForegroundColor Green
    }

    # * Export certificate with private key
    if ($ExportPrivateKey -and !$PSBoundParameters.ContainsKey('certPassword')) {
        $securePassword = Read-Host "Please type the certificate password" -AsSecureString
        Write-Host "Exporting the certificate..." -ForegroundColor Yellow
        ExportCertificate -Certificate $certificate -Path $certFilePath -CertName $certName -Password $securePassword -certType "pfx"
        Write-Host " The certificate was successfully exported!" -ForegroundColor Green
    }

    if ($ExportPrivateKey -and $PSBoundParameters.ContainsKey('certPassword')) {
        Write-Host "Exporting the certificate..." -ForegroundColor Yellow
        $securePassword = ConvertTo-SecureString $certPassword -AsPlainText -Force
        ExportCertificate -Certificate $certificate -Path $certFilePath -CertName $certName -Password $securePassword -certType "pfx"
        Write-Host " The certificate was successfully exported!" -ForegroundColor Green
    }

    # * Upload public certificate
    $cer = ""
    $binCert = ""
    $credValue = ""
    $cer = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
    $cer.Import($certFilePath)
    $binCert = $cer.GetRawCertData()
    $credValue = [System.Convert]::ToBase64String($binCert)

    # * Add certificate credential
    Write-Host "Creating the certificate credential for application" $appId"..." -ForegroundColor Yellow
    New-AzADAppCredential -ApplicationId $appId -CertValue $credValue -StartDate $cer.GetEffectiveDateString() -EndDate $cer.NotAfter
    Write-Host "Done!" -ForegroundColor Green
}

# Generates password
if ($PSBoundParameters.ContainsKey('password')) {
    $credentials = New-Object -TypeName "Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.MicrosoftGraphPasswordCredential"
    $credentials.StartDateTime = $startDate
    $credentials.EndDateTime =  $endDate

    # * Add password credential
    Write-Host "Creating the application password for" $appId"..." -ForegroundColor Yellow
    # ? Option to output the password to screen or save to keyvault
    New-AzADAppCredential -ApplicationId $appId -StartDate $startDate -EndDate $endDate
    Write-Host "Done!" -ForegroundColor Green
}


