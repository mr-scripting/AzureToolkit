<#
.SYNOPSIS
    Script that generates service principal credentials
.DESCRIPTION
    This script automates the creation of a service principal credential. There are 2 options, self-signed
    certificate or password
.PARAMETER certName
    The certificate name.
.PARAMETER certFilePath
    The local filesystem path where the certificate file will be placed.
.PARAMETER appId
    The application Id for the sevice principal
.PARAMETER KeyLength
    The certificate private key length
.PARAMETER KeyAlgorithm
    The certificate key algorithm
.PARAMETER certSubject
    The the unique identifier for the certificate name
.PARAMETER CertStoreLocation
    The certificate store where you wish to store the certificate. It is Cert:\CurrentUser\My by default
.PARAMETER certPassword
    The certificate password. It will be used to access the exported pfx
.PARAMETER ExportPubCertificate
    Exports the public certificate to a file
.PARAMETER ExportPrivateKey
    Exports the private certificate to a file
.PARAMETER startDate
    The start date for the credential
.PARAMETER endDate
     The end date for the credential
.EXAMPLE
    C:\PS>.\Add-ServicePrincipalCredential.ps1 -password -appId xxxxxx-xxxx-xxxx-xxx-xxxxxxxx
    Creates an autogenerated password credential with startdate (get-date) and end date (get-date + 1year)
.EXAMPLE
    C:\PS>.\Add-ServicePrincipalCredential.ps1 -password -appId xxxxxx-xxxx-xxxx-xxx-xxxxxxxx -startDate 05/13/2022 -endDate 05/14/2022
    Creates an autogenerated password credential specifying the start and end date (hours are also accepted example: 07/17/2017 09:00:00)
.EXAMPLE
    C:\PS>.\Add-ServicePrincipalCredential.ps1 -certName xxxxx -certFilePath x:\xxxx -appId xxxxxxxxxx -startDate 05/16/2022 -endDate 05/17/2022
    Create certificate specifying the start and end date (hours are also accepted example: 07/17/2017 09:00:00)
.OUTPUTS
    Password, certificate files
.NOTES
    Version:        1.0
    Author:         Mr-Scripting
    Creation Date:  13/05/2022
    Purpose/Change: Initial script development
.FUNCTIONALITY
    This script is aimed for Keyvault data operations like. Import of new secrets/keys/certificates or export of secrets/keys/certificates
#>
Param(
    [Parameter(
        Mandatory = $true,
        Position = 1,
        HelpMessage = "What is the source for your secrets?"
    )]
    [ValidateSet("AzureDevops", "AzureKeyvault")]
    [string]$source,

    [Parameter(
        Mandatory = $true,
        Position = 2,
        HelpMessage = "What is the destination for your secrets?"
    )]
    [ValidateSet("AzureKeyvault", "Keepass")]
    [string]$destination = "AzureKeyvault"
)
DynamicParam
{
    if ($asource -eq "AzureKeyvault" -or $destination -eq "AzureKeyvault")
    {
        #create a new ParameterAttribute Object
        $keyvaultName = New-Object System.Management.Automation.ParameterAttribute
        $keyvaultName.Position = 3
        $keyvaultName.Mandatory = $true
        $keyvaultName.HelpMessage = "Please enter the Azure Keyvault name:"

        #create an attributecollection object for the attribute we just created.
        $AKVattributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]

        #add our custom attribute
        $AKVattributeCollection.Add($keyvaultName)

        #add our paramater specifying the attribute collection
        $akvNameParam = New-Object System.Management.Automation.RuntimeDefinedParameter('keyvaultName', [string], $AKVattributeCollection)

        #expose the name of our parameter
        $paramDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        $paramDictionary.Add('keyvaultName', $akvNameParam)
        return $paramDictionary
    }
}

begin
{
    function Install-Requirements() {
        $moduleInstalled = Get-InstalledModule -Name $Name -ErrorAction SilentlyContinue
    }
}
process {}
end {}


